{"version":3,"sources":["index.js"],"names":["ListNode","val","next","prototype","addNum","num","list1","list2","toArray","list","arr","flag","push","Number","isSafeInteger","toListNode","Array","index","length","parseInt","computedNum","a","reverse","join","addTwoNumbers","l1","l2","root","val1","val2","flag1","flag2","hasTen","sum","b","aa","bb","console","log","res"],"mappings":"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","file":"LeetCode.e31bb0bc.map","sourceRoot":"..","sourcesContent":["\r\n/**\r\n * Definition for singly-linked list.\r\n * function ListNode(val) {\r\n *     this.val = val;\r\n *     this.next = null;\r\n * }\r\n */\r\nfunction ListNode(val) {\r\n    this.val = val;\r\n    this.next = null;\r\n}\r\n\r\nListNode.prototype.addNum = function (num) {\r\n    this.next = new ListNode(num);\r\n    return this.next;\r\n}\r\n\r\nconst list1 = new ListNode(2);\r\nlist1.addNum(4).addNum(3);\r\nconst list2 = new ListNode(5);\r\nlist2.addNum(6).addNum(4);\r\n\r\nconst toArray = (list) => {\r\n    const arr = [];\r\n    let flag = list;\r\n    do {\r\n        arr.push(flag.val);\r\n        flag = flag.next;\r\n    } while (flag instanceof ListNode && Number.isSafeInteger(flag.val));\r\n    return arr;\r\n}\r\nconst toListNode = (arr) => {\r\n    if (!(arr instanceof Array)) { return }\r\n    let list = new ListNode(arr[0]);\r\n    let flag = list;\r\n    for (let index = 1; index < arr.length; index += 1) {\r\n        const num = parseInt(arr[index]);\r\n        if (Number.isSafeInteger(num)) {\r\n            flag.next = new ListNode(num);\r\n            flag = flag.next;\r\n        }\r\n    }\r\n    return list;\r\n}\r\n\r\nconst computedNum = (arr) => {\r\n    if (!(arr instanceof Array)) { return; }\r\n    const a = arr.reverse().join('');\r\n    return parseInt(a);\r\n}\r\nvar addTwoNumbers = function (l1, l2) {\r\n    let root, flag, val1, val2;\r\n    let flag1 = l1;\r\n    let flag2 = l2;\r\n    let hasTen = 0;\r\n    while (flag1 instanceof ListNode || flag2 instanceof ListNode || hasTen) {\r\n        // 取同位值，然后更改位置\r\n        if (flag1) {\r\n            val1 = parseInt(flag1.val);\r\n            flag1 = flag1.next;\r\n        } else {\r\n            val1 = 0;\r\n        }\r\n        if (flag2) {\r\n            val2 = parseInt(flag2.val);\r\n            flag2 = flag2.next;\r\n        } else {\r\n            val2 = 0;\r\n        }\r\n        // 计算\r\n        let sum = val1 + val2 + hasTen;\r\n        // 进位归0；\r\n        hasTen = 0;\r\n        if (sum > 9) {\r\n            hasTen = 1;\r\n            sum -= 10;\r\n        }\r\n        // 设置next\r\n        if (flag instanceof ListNode) {\r\n            flag.next = new ListNode(sum);\r\n            flag = flag.next;\r\n        } else {\r\n            root = new ListNode(sum);\r\n            flag = root;\r\n        }\r\n    }\r\n    return root;\r\n};\r\n\r\n// addTwoNumbers(list1, list2);\r\na = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1];\r\nb = [5, 6, 4];\r\naa = toListNode(a);\r\nbb = toListNode(b);\r\nconsole.log('start')\r\nconsole.log(aa, bb)\r\nconst res = addTwoNumbers(aa, bb);\r\nconsole.log(toArray(res))\r\nconsole.log('end')"]}